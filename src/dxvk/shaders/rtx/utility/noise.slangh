/*
* Copyright (c) 2023-2024, NVIDIA CORPORATION. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
#pragma once

#include "rtx/utility/common.slangh"
#include "rtx/utility/packing.slangh"

// Stateless Random Functions

// "Prospector"-style 32 bit integer hashing function
// Low bias parameters from: https://github.com/skeeto/hash-prospector/issues/19#issuecomment-1120105785
// Attempts to map an input integer to a nearly uniform random output integer, useful mainly when white noise-esque
// random is desired without involving more complex state. Should be superior to most other 32 bit integer hashing
// functions using this amount of shifting/xoring/multiplying while also being very cheap. May be slightly worse than
// more complex forms using more coeffecients/shifting, but for graphics purposes this is more than enough.
uint uintHash(uint x)
{
  x ^= x >> 16;
  x *= 0x21f0aaadU;
  x ^= x >> 15;
  x *= 0x735a2d97U;
  x ^= x >> 15;
  return x;
}

// Hashes a uint2 into a single uint
uint uintHash(uint2 x)
{
  return uintHash(x.x ^ uintHash(x.y));
}

// Hashes a uint3 into a single uint
uint uintHash(uint3 x)
{
  return uintHash(x.x ^ uintHash(x.y) ^ uintHash(x.z));
}

// Hashes a uint4 into a single uint
uint uintHash(uint4 x)
{
  return uintHash(x.x ^ uintHash(x.y) ^ uintHash(x.z) ^ uintHash(x.w));
}

// Generates a uniformly random float in the range [0, 1) from a 1D input seed
float randomFloat(uint x)
{
  return unorm23ToFloat(uintHash(x));
}

// Generates a uniformly random float in the range [0, 1) from a 2D input seed
float randomFloat(uint2 x)
{
  return unorm23ToFloat(uintHash(x));
}

// Generates a uniformly random float in the range [0, 1) from a 3D input seed
float randomFloat(uint3 x)
{
  return unorm23ToFloat(uintHash(x));
}

// Generates a uniformly random float in the range [0, 1) from a 4D input seed
float randomFloat(uint4 x)
{
  return unorm23ToFloat(uintHash(x));
}

// Generates a uniformly random vec3 in the range [0, 1) from a 3D input seed
vec3 randomFloat3(uint3 x)
{
  // Note: Create a chain of hashes much like sequential iterations in a stateful
  // RNG function to get ideally not-correlated values on each axis for the combined
  // 3D input seed.
  const uint hashX = uintHash(x);
  const uint hashY = uintHash(hashX);
  const uint hashZ = uintHash(hashY);

  return vec3(
    unorm23ToFloat(hashX),
    unorm23ToFloat(hashY),
    unorm23ToFloat(hashZ)
  );
}

uint reverseBits4(uint x)
{
  x = ((x & 0x5) << 1) | ((x & 0xA) >> 1);
  x = ((x & 0x3) << 2) | ((x & 0xC) >> 2);
  return x;
}

// https://en.wikipedia.org/wiki/Ordered_dithering
// RESULT: [0; 1)
float bayer4x4(uvec2 samplePos, uint frameIndex)
{
  uvec2 samplePosWrap = samplePos & 3;
  uint a = 2068378560 * (1 - (samplePosWrap.y >> 1)) + 1500172770 * (samplePosWrap.y >> 1);
  uint b = (samplePosWrap.x + ((samplePosWrap.y & 1) << 2)) << 2;
  return float(((a >> b) + reverseBits4(frameIndex)) & 0xF) * 0.0625f; // * 1/16
}

// Implementation of interleaved gradient noise, which is half way between dither and random
//
// This idea is proposed on siggraph 2014 presentation: NEXT GENERATION POST PROCESSING IN CALL OF DUTY: ADVANCED WARFARE
// http://advances.realtimerendering.com/s2014/index.html#_NEXT_GENERATION_POST
//
// We extend this with frame index to bring more randomness across frames:
// use LCG to generate frame index based random offset of original uv position.
// https://en.wikipedia.org/wiki/Linear_congruential_generator
//
// RESULT: [0: 1]
float temporalInterleavedGradientNoise(float2 uvPosition, uint frameIdx)
{
  uvPosition += float2(frameIdx * 1664525 + 1013904223, frameIdx * 214013 + 2531011) * 1e-7f;

  const float3 magic = float3(0.06711056f, 0.00583715f, 52.9829189f); // Reference from page 120
  return frac(magic.z * frac(dot(uvPosition, magic.xy)));
}

vec2 R2(uint index)
{
  // Generalized golden ratio to 2d.
  // Solution to x^3 = x + 1
  // AKA plastic constant.
  // from http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/
  float g = 1.32471795724474602596f;
  return fract(vec2(float(index) / g, float(index) / (g*g)));
}

// Stateful Random Functions

#define RNG_SEED_FRAME_RANGE 64

struct RNG
{
  uvec2 pixelIdx;
  uint seed;
  uint temporalIdx;
};

// Creates a RNG from a pixel index (which should be spatially consistent), a temporal index (which should
// only be provided from the current frame index for temporal consistency), and an optional sample offset to
// advance the seed as if a number of samples happened already (this is useful for reconstructing a RNG in some cases).
RNG createRNG(uvec2 pixelIdx, uint temporalIdx, uint sampleOffset)
{
  RNG rng;
  rng.pixelIdx = pixelIdx;
  rng.seed = temporalIdx / RNG_SEED_FRAME_RANGE + sampleOffset;
  rng.temporalIdx = temporalIdx;
  return rng;
}

// Overload for typical RNG construction when no sample offset is needed.
RNG createRNG(uvec2 pixelIdx, uint temporalIdx)
{
  return createRNG(pixelIdx, temporalIdx, 0);
}

// RNG construction variant used when no pixel index data is available. Likely not as optimal
// for proper blue noise usage, but saves from needing to pass data through payloads for example.
RNG createRNGPosition(vec3 position, uint temporalIdx, uint sampleOffset)
{
  RNG rng;
  // Note: Use x/y position values mixed with z position value as the "pixel index".
  rng.pixelIdx = uvec2(
    floatBitsToUint(position.x) ^ floatBitsToUint(position.z),
    floatBitsToUint(position.y) ^ floatBitsToUint(position.z));
  rng.seed = temporalIdx / RNG_SEED_FRAME_RANGE + sampleOffset;
  rng.temporalIdx = temporalIdx;
  return rng;
}

// Overload for position-based RNG construction when no sample offset is needed.
RNG createRNGPosition(vec3 position, uint temporalIdx)
{
  return createRNGPosition(position, temporalIdx, 0);
}

// NOTE: This will allow anyone to create a RNG sampler anywhere without needing to pass it around to every function.
//       By default, this uses the invocation thread ID (works for Compute and Ray pipelines).
RNG createRNGAnywhere(uint temporalIdx, uint offset)
{
  const uint2 pixelIdx = getDispatchRaysIndex().xy;

  return createRNG(pixelIdx, temporalIdx, offset);
}

// Note: Used for validating blue noise implementation. Set to 1 to use white noise for everything which should be
// fairly purely random with full float precision. Blue noise on the other hand will be quantized to the precision of
// unorms in the blue noise texture, but generally this does not matter even as low as 8 bits of precision.
#define WHITE_NOISE_OVERRIDE 0

// Samples a floating point noise value from the RNG. Returned range is [0, 1)
// Note: This is a scalar (1D) sample value, ideally it should only be used for uncorrelated 1D scalar samples, not samples
// within 2 or 3 dimensional space (e.g. direction vectors, BSDF sample inputs, etc). Currently we have no way to actually
// generate proper 2D or 3D blue noise samples however, so subsequent samples of this should at least be reasonable as this
// roughly follows the spatio-temporal blue noise algorithm for scalar generation. This could be improved some day however.
// See: "Scalar Spatiotemporal Blue Noise Masks": https://arxiv.org/pdf/2112.09629.pdf
float getNextSampleBlueNoise(inout RNG rng)
{
  const uint oldSeed = rng.seed++;

#if WHITE_NOISE_OVERRIDE
  return randomFloat(uint4(
    rng.pixelIdx.x,
    rng.pixelIdx.y,
    rng.temporalIdx,
    oldSeed
  ));
#else
  // Note: Increment the seed once per sample to let each sample be distinct within the current blue noise
  // temporal layer.
  uvec2 seedOffset = uvec2(R2(oldSeed) * uvec2(128, 128));
  float value = texelFetch(BlueNoise, ivec3((rng.pixelIdx.x + seedOffset.x) & 127,
                                            (rng.pixelIdx.y + seedOffset.y) & 127, 
                                            (rng.temporalIdx) & (RNG_SEED_FRAME_RANGE - 1)), 
                                            0).r;
  const float quantum = 1.0f / 255.0f;
  // unorm blue noise texture returns values in the range [0, 1], make sure to never return 1.0 exactly
  // as a number of sampling strategies use a [0, 1) range.
  return min(value, 1.0f - quantum);
#endif
}
