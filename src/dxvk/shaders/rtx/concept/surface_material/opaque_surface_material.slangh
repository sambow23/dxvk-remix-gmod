/*
* Copyright (c) 2023-2024, NVIDIA CORPORATION. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
#pragma once

// Opaque Surface Material Functions

OpaqueSurfaceMaterial opaqueSurfaceMaterialCreate(MemoryPolymorphicSurfaceMaterial memoryPolymorphicSurfaceMaterial, const bool visibilityCheckOnly = false)
{
  // If we're just doing a visibility check, force unneeded textures to invalid so they aren't accessed.
  if (visibilityCheckOnly)
  {
    OpaqueSurfaceMaterial opaqueSurfaceMaterial = reinterpret<OpaqueSurfaceMaterial>(memoryPolymorphicSurfaceMaterial);
    opaqueSurfaceMaterial.emissiveColorTextureIndex = BINDING_INDEX_INVALID;
    opaqueSurfaceMaterial.roughnessTextureIndex = BINDING_INDEX_INVALID;
    opaqueSurfaceMaterial.metallicTextureIndex = BINDING_INDEX_INVALID;
    opaqueSurfaceMaterial.normalTextureIndex = BINDING_INDEX_INVALID;
    opaqueSurfaceMaterial.tangentTextureIndex = BINDING_INDEX_INVALID;
    opaqueSurfaceMaterial.roughnessConstant = 1.h;
    opaqueSurfaceMaterial.metallicConstant = 0.h;
    opaqueSurfaceMaterial.anisotropy = 0.h;
    opaqueSurfaceMaterial.emissiveColorConstant = 0.h;
    opaqueSurfaceMaterial.emissiveIntensity = 0.h;
    return opaqueSurfaceMaterial;
  }
  else
  {
    return reinterpret<OpaqueSurfaceMaterial>(memoryPolymorphicSurfaceMaterial);
  }
}

// Subsurface Material Functions
SubsurfaceMaterial subsurfaceMaterialCreate(MemoryPolymorphicSurfaceMaterial memoryPolymorphicSurfaceMaterial)
{
  return reinterpret<SubsurfaceMaterial>(memoryPolymorphicSurfaceMaterial);
}

SubsurfaceMaterial subsurfaceMaterialCreate(const SubsurfaceMaterialInteraction subsurfaceMaterialInteraction)
{
  SubsurfaceMaterial subsurfaceMaterial;

  const f16vec3 transmittanceColor = r11g11b10ToColor(subsurfaceMaterialInteraction.packedTransmittanceColor);
  subsurfaceMaterial.volumetricAttenuationCoefficient = subsurfaceMaterialInteraction.maxSampleRadius == 0.0f ?
    transmittanceToAttenuationCoefficient(max(transmittanceColor, materialEpsilon), subsurfaceMaterialInteraction.measurementDistance) :
    transmittanceColor;
  subsurfaceMaterial.measurementDistance = subsurfaceMaterialInteraction.measurementDistance;
  subsurfaceMaterial.singleScatteringAlbedo = r11g11b10ToColor(subsurfaceMaterialInteraction.packedSingleScatteringAlbedo);
  subsurfaceMaterial.volumetricAnisotropy = snorm8ToF16(subsurfaceMaterialInteraction.volumetricAnisotropy);
  subsurfaceMaterial.maxSampleRadius = unorm8ToF16(subsurfaceMaterialInteraction.maxSampleRadius);

  return subsurfaceMaterial;
}

uint16_t getSubsurfaceMaterialIndex(const MemoryPolymorphicSurfaceMaterial memoryPolymorphicSurfaceMaterial, inout uint16_t samplerIndex)
{
  OpaqueSurfaceMaterial opaqueSurfaceMaterial = opaqueSurfaceMaterialCreate(memoryPolymorphicSurfaceMaterial);
  samplerIndex = opaqueSurfaceMaterial.samplerIndex;
  return opaqueSurfaceMaterial.subsurfaceMaterialIndex;
}
