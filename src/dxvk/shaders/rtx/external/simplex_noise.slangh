/* https://www.shadertoy.com/view/XsX3zB
 *
 * The MIT License
 * Copyright (c) 2013 Nikita Miropolskiy
 * 
 * ( license has been changed from CCA-NC-SA 3.0 to MIT
 *
 *   but thanks for attributing your source code when deriving from this sample 
 *   with a following link: https://www.shadertoy.com/view/XsX3zB )
 *
 * ~
 * ~ if you're looking for procedural noise implementation examples you might 
 * ~ also want to look at the following shaders:
 * ~ 
 * ~ Noise Lab shader by candycat: https://www.shadertoy.com/view/4sc3z2
 * ~
 * ~ Noise shaders by iq:
 * ~     Value    Noise 2D, Derivatives: https://www.shadertoy.com/view/4dXBRH
 * ~     Gradient Noise 2D, Derivatives: https://www.shadertoy.com/view/XdXBRH
 * ~     Value    Noise 3D, Derivatives: https://www.shadertoy.com/view/XsXfRH
 * ~     Gradient Noise 3D, Derivatives: https://www.shadertoy.com/view/4dffRH
 * ~     Value    Noise 2D             : https://www.shadertoy.com/view/lsf3WH
 * ~     Value    Noise 3D             : https://www.shadertoy.com/view/4sfGzS
 * ~     Gradient Noise 2D             : https://www.shadertoy.com/view/XdXGW8
 * ~     Gradient Noise 3D             : https://www.shadertoy.com/view/Xsl3Dl
 * ~     Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH
 * ~     Voronoise: https://www.shadertoy.com/view/Xd23Dh
 * ~ 
 *
 */

 #pragma once

// Generates values in R^3 in the range [-0.5, 0.5]
vec3 simplexRandom(vec3 c) {
  // Note: Modified to use Remix's superior hash-based noise algorithms. This assumes these functions are included
  // before this file is included to work properly.
  return randomFloat3(asuint(c)) - vec3(0.5f);
}

// 3D Simplex Noise
// Returns a noise value distributed within the range [-1, 1].
float simplexNoise3D(vec3 p) {
  /* skew constants for 3d simplex functions */
  const float F3 = 0.3333333f;
  const float G3 = 0.1666667f;

  /* 1. find current tetrahedron T and it's four vertices */
  /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */
  /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/

  /* calculate s and x */
  const vec3 s = floor(p + dot(p, vec3(F3)));
  const vec3 x = p - s + dot(s, vec3(G3));

  /* calculate i1 and i2 */
  const vec3 e1 = step(vec3(0.0f), x - x.yzx);
  const vec3 e2 = 1.0f - e1.zxy;
  const vec3 i1 = e1 * e2;
  // Note: Previously 1.0f - e1.zxy * (1.0f - e1), this form is simpler potentially?
  const vec3 i2 = min(e1 + e2, 1.0f);
  const vec3 i3 = vec3(1.0f);

  /* x1, x2, x3 */
  vec3 x1 = x - i1 + G3;
  vec3 x2 = x - i2 + 2.0f * G3;
  vec3 x3 = x - i3 + 3.0f * G3;

  /* 2. find four surflets and store them in d */
  vec4 w, d;

  /* calculate surflet weights */
  w.x = dot(x, x);
  w.y = dot(x1, x1);
  w.z = dot(x2, x2);
  w.w = dot(x3, x3);

  /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */
  w = max(0.6f - w, 0.0f);

  /* calculate surflet components */
  d.x = dot(simplexRandom(s), x);
  d.y = dot(simplexRandom(s + i1), x1);
  d.z = dot(simplexRandom(s + i2), x2);
  d.w = dot(simplexRandom(s + i3), x3);

  /* multiply d by w^4 */
  w *= w;
  w *= w;
  d *= w;

  /* 3. return the sum of the four surflets */
  return dot(d, vec4(52.0f));
}
